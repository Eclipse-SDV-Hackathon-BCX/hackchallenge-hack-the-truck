// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SensorNearData/SurroundViewImage/SurroundViewImage.proto

#include "SensorNearData/SurroundViewImage/SurroundViewImage.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_header_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Header_header_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_SensorNearData_2fBaseImage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BaseImage_SensorNearData_2fBaseImage_2eproto;
namespace pb {
namespace SensorNearData {
namespace SurroundViewImage {
class SurroundViewImageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SurroundViewImage> _instance;
} _SurroundViewImage_default_instance_;
}  // namespace SurroundViewImage
}  // namespace SensorNearData
}  // namespace pb
static void InitDefaultsscc_info_SurroundViewImage_SensorNearData_2fSurroundViewImage_2fSurroundViewImage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::SensorNearData::SurroundViewImage::_SurroundViewImage_default_instance_;
    new (ptr) ::pb::SensorNearData::SurroundViewImage::SurroundViewImage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::SensorNearData::SurroundViewImage::SurroundViewImage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SurroundViewImage_SensorNearData_2fSurroundViewImage_2fSurroundViewImage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SurroundViewImage_SensorNearData_2fSurroundViewImage_2fSurroundViewImage_2eproto}, {
      &scc_info_Header_header_2eproto.base,
      &scc_info_BaseImage_SensorNearData_2fBaseImage_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_SensorNearData_2fSurroundViewImage_2fSurroundViewImage_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_SensorNearData_2fSurroundViewImage_2fSurroundViewImage_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_SensorNearData_2fSurroundViewImage_2fSurroundViewImage_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_SensorNearData_2fSurroundViewImage_2fSurroundViewImage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::SensorNearData::SurroundViewImage::SurroundViewImage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::SensorNearData::SurroundViewImage::SurroundViewImage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::SensorNearData::SurroundViewImage::SurroundViewImage, header_),
  PROTOBUF_FIELD_OFFSET(::pb::SensorNearData::SurroundViewImage::SurroundViewImage, data_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::pb::SensorNearData::SurroundViewImage::SurroundViewImage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::SensorNearData::SurroundViewImage::_SurroundViewImage_default_instance_),
};

const char descriptor_table_protodef_SensorNearData_2fSurroundViewImage_2fSurroundViewImage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n8SensorNearData/SurroundViewImage/Surro"
  "undViewImage.proto\022#pb.SensorNearData.Su"
  "rroundViewImage\032\014header.proto\032\036SensorNea"
  "rData/BaseImage.proto\"[\n\021SurroundViewIma"
  "ge\022\032\n\006header\030\001 \001(\0132\n.pb.Header\022*\n\004data\030\002"
  " \001(\0132\034.pb.SensorNearData.BaseImage"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_SensorNearData_2fSurroundViewImage_2fSurroundViewImage_2eproto_deps[2] = {
  &::descriptor_table_SensorNearData_2fBaseImage_2eproto,
  &::descriptor_table_header_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_SensorNearData_2fSurroundViewImage_2fSurroundViewImage_2eproto_sccs[1] = {
  &scc_info_SurroundViewImage_SensorNearData_2fSurroundViewImage_2fSurroundViewImage_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_SensorNearData_2fSurroundViewImage_2fSurroundViewImage_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_SensorNearData_2fSurroundViewImage_2fSurroundViewImage_2eproto = {
  false, false, descriptor_table_protodef_SensorNearData_2fSurroundViewImage_2fSurroundViewImage_2eproto, "SensorNearData/SurroundViewImage/SurroundViewImage.proto", 234,
  &descriptor_table_SensorNearData_2fSurroundViewImage_2fSurroundViewImage_2eproto_once, descriptor_table_SensorNearData_2fSurroundViewImage_2fSurroundViewImage_2eproto_sccs, descriptor_table_SensorNearData_2fSurroundViewImage_2fSurroundViewImage_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_SensorNearData_2fSurroundViewImage_2fSurroundViewImage_2eproto::offsets,
  file_level_metadata_SensorNearData_2fSurroundViewImage_2fSurroundViewImage_2eproto, 1, file_level_enum_descriptors_SensorNearData_2fSurroundViewImage_2fSurroundViewImage_2eproto, file_level_service_descriptors_SensorNearData_2fSurroundViewImage_2fSurroundViewImage_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_SensorNearData_2fSurroundViewImage_2fSurroundViewImage_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_SensorNearData_2fSurroundViewImage_2fSurroundViewImage_2eproto)), true);
namespace pb {
namespace SensorNearData {
namespace SurroundViewImage {

// ===================================================================

void SurroundViewImage::InitAsDefaultInstance() {
  ::pb::SensorNearData::SurroundViewImage::_SurroundViewImage_default_instance_._instance.get_mutable()->header_ = const_cast< ::pb::Header*>(
      ::pb::Header::internal_default_instance());
  ::pb::SensorNearData::SurroundViewImage::_SurroundViewImage_default_instance_._instance.get_mutable()->data_ = const_cast< ::pb::SensorNearData::BaseImage*>(
      ::pb::SensorNearData::BaseImage::internal_default_instance());
}
class SurroundViewImage::_Internal {
 public:
  using HasBits = decltype(std::declval<SurroundViewImage>()._has_bits_);
  static const ::pb::Header& header(const SurroundViewImage* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::pb::SensorNearData::BaseImage& data(const SurroundViewImage* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::pb::Header&
SurroundViewImage::_Internal::header(const SurroundViewImage* msg) {
  return *msg->header_;
}
const ::pb::SensorNearData::BaseImage&
SurroundViewImage::_Internal::data(const SurroundViewImage* msg) {
  return *msg->data_;
}
void SurroundViewImage::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SurroundViewImage::clear_data() {
  if (data_ != nullptr) data_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
SurroundViewImage::SurroundViewImage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.SensorNearData.SurroundViewImage.SurroundViewImage)
}
SurroundViewImage::SurroundViewImage(const SurroundViewImage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::pb::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_data()) {
    data_ = new ::pb::SensorNearData::BaseImage(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pb.SensorNearData.SurroundViewImage.SurroundViewImage)
}

void SurroundViewImage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SurroundViewImage_SensorNearData_2fSurroundViewImage_2fSurroundViewImage_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_) -
      reinterpret_cast<char*>(&header_)) + sizeof(data_));
}

SurroundViewImage::~SurroundViewImage() {
  // @@protoc_insertion_point(destructor:pb.SensorNearData.SurroundViewImage.SurroundViewImage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SurroundViewImage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete data_;
}

void SurroundViewImage::ArenaDtor(void* object) {
  SurroundViewImage* _this = reinterpret_cast< SurroundViewImage* >(object);
  (void)_this;
}
void SurroundViewImage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SurroundViewImage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SurroundViewImage& SurroundViewImage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SurroundViewImage_SensorNearData_2fSurroundViewImage_2fSurroundViewImage_2eproto.base);
  return *internal_default_instance();
}


void SurroundViewImage::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.SensorNearData.SurroundViewImage.SurroundViewImage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(data_ != nullptr);
      data_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SurroundViewImage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .pb.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.SensorNearData.BaseImage data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SurroundViewImage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SensorNearData.SurroundViewImage.SurroundViewImage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .pb.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional .pb.SensorNearData.BaseImage data = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SensorNearData.SurroundViewImage.SurroundViewImage)
  return target;
}

size_t SurroundViewImage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.SensorNearData.SurroundViewImage.SurroundViewImage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .pb.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .pb.SensorNearData.BaseImage data = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SurroundViewImage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.SensorNearData.SurroundViewImage.SurroundViewImage)
  GOOGLE_DCHECK_NE(&from, this);
  const SurroundViewImage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SurroundViewImage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.SensorNearData.SurroundViewImage.SurroundViewImage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.SensorNearData.SurroundViewImage.SurroundViewImage)
    MergeFrom(*source);
  }
}

void SurroundViewImage::MergeFrom(const SurroundViewImage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.SensorNearData.SurroundViewImage.SurroundViewImage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::pb::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_data()->::pb::SensorNearData::BaseImage::MergeFrom(from._internal_data());
    }
  }
}

void SurroundViewImage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.SensorNearData.SurroundViewImage.SurroundViewImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SurroundViewImage::CopyFrom(const SurroundViewImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.SensorNearData.SurroundViewImage.SurroundViewImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SurroundViewImage::IsInitialized() const {
  return true;
}

void SurroundViewImage::InternalSwap(SurroundViewImage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SurroundViewImage, data_)
      + sizeof(SurroundViewImage::data_)
      - PROTOBUF_FIELD_OFFSET(SurroundViewImage, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SurroundViewImage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace SurroundViewImage
}  // namespace SensorNearData
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::SensorNearData::SurroundViewImage::SurroundViewImage* Arena::CreateMaybeMessage< ::pb::SensorNearData::SurroundViewImage::SurroundViewImage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::SensorNearData::SurroundViewImage::SurroundViewImage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
