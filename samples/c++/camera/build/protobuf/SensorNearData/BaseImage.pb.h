// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SensorNearData/BaseImage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_SensorNearData_2fBaseImage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_SensorNearData_2fBaseImage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_SensorNearData_2fBaseImage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_SensorNearData_2fBaseImage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_SensorNearData_2fBaseImage_2eproto;
namespace pb {
namespace SensorNearData {
class BaseImage;
class BaseImageDefaultTypeInternal;
extern BaseImageDefaultTypeInternal _BaseImage_default_instance_;
}  // namespace SensorNearData
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::SensorNearData::BaseImage* Arena::CreateMaybeMessage<::pb::SensorNearData::BaseImage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {
namespace SensorNearData {

// ===================================================================

class BaseImage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.SensorNearData.BaseImage) */ {
 public:
  inline BaseImage() : BaseImage(nullptr) {};
  virtual ~BaseImage();

  BaseImage(const BaseImage& from);
  BaseImage(BaseImage&& from) noexcept
    : BaseImage() {
    *this = ::std::move(from);
  }

  inline BaseImage& operator=(const BaseImage& from) {
    CopyFrom(from);
    return *this;
  }
  inline BaseImage& operator=(BaseImage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BaseImage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BaseImage* internal_default_instance() {
    return reinterpret_cast<const BaseImage*>(
               &_BaseImage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BaseImage& a, BaseImage& b) {
    a.Swap(&b);
  }
  inline void Swap(BaseImage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BaseImage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BaseImage* New() const final {
    return CreateMaybeMessage<BaseImage>(nullptr);
  }

  BaseImage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BaseImage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BaseImage& from);
  void MergeFrom(const BaseImage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BaseImage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.SensorNearData.BaseImage";
  }
  protected:
  explicit BaseImage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SensorNearData_2fBaseImage_2eproto);
    return ::descriptor_table_SensorNearData_2fBaseImage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageDataFieldNumber = 900,
    kDataSizeFieldNumber = 800,
    kWidthFieldNumber = 100,
    kHeightFieldNumber = 200,
    kBitsPerPixelFieldNumber = 300,
  };
  // optional bytes imageData = 900;
  bool has_imagedata() const;
  private:
  bool _internal_has_imagedata() const;
  public:
  void clear_imagedata();
  const std::string& imagedata() const;
  void set_imagedata(const std::string& value);
  void set_imagedata(std::string&& value);
  void set_imagedata(const char* value);
  void set_imagedata(const void* value, size_t size);
  std::string* mutable_imagedata();
  std::string* release_imagedata();
  void set_allocated_imagedata(std::string* imagedata);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_imagedata();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_imagedata(
      std::string* imagedata);
  private:
  const std::string& _internal_imagedata() const;
  void _internal_set_imagedata(const std::string& value);
  std::string* _internal_mutable_imagedata();
  public:

  // optional uint32 dataSize = 800 [default = 0];
  bool has_datasize() const;
  private:
  bool _internal_has_datasize() const;
  public:
  void clear_datasize();
  ::PROTOBUF_NAMESPACE_ID::uint32 datasize() const;
  void set_datasize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_datasize() const;
  void _internal_set_datasize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 width = 100 [default = 0];
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 height = 200 [default = 0];
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 bitsPerPixel = 300 [default = 8];
  bool has_bitsperpixel() const;
  private:
  bool _internal_has_bitsperpixel() const;
  public:
  void clear_bitsperpixel();
  ::PROTOBUF_NAMESPACE_ID::uint32 bitsperpixel() const;
  void set_bitsperpixel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_bitsperpixel() const;
  void _internal_set_bitsperpixel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.SensorNearData.BaseImage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imagedata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 datasize_;
  ::PROTOBUF_NAMESPACE_ID::uint32 width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bitsperpixel_;
  friend struct ::TableStruct_SensorNearData_2fBaseImage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BaseImage

// optional uint32 width = 100 [default = 0];
inline bool BaseImage::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BaseImage::has_width() const {
  return _internal_has_width();
}
inline void BaseImage::clear_width() {
  width_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BaseImage::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BaseImage::width() const {
  // @@protoc_insertion_point(field_get:pb.SensorNearData.BaseImage.width)
  return _internal_width();
}
inline void BaseImage::_internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  width_ = value;
}
inline void BaseImage::set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:pb.SensorNearData.BaseImage.width)
}

// optional uint32 height = 200 [default = 0];
inline bool BaseImage::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BaseImage::has_height() const {
  return _internal_has_height();
}
inline void BaseImage::clear_height() {
  height_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BaseImage::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BaseImage::height() const {
  // @@protoc_insertion_point(field_get:pb.SensorNearData.BaseImage.height)
  return _internal_height();
}
inline void BaseImage::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  height_ = value;
}
inline void BaseImage::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:pb.SensorNearData.BaseImage.height)
}

// optional uint32 bitsPerPixel = 300 [default = 8];
inline bool BaseImage::_internal_has_bitsperpixel() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool BaseImage::has_bitsperpixel() const {
  return _internal_has_bitsperpixel();
}
inline void BaseImage::clear_bitsperpixel() {
  bitsperpixel_ = 8u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BaseImage::_internal_bitsperpixel() const {
  return bitsperpixel_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BaseImage::bitsperpixel() const {
  // @@protoc_insertion_point(field_get:pb.SensorNearData.BaseImage.bitsPerPixel)
  return _internal_bitsperpixel();
}
inline void BaseImage::_internal_set_bitsperpixel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  bitsperpixel_ = value;
}
inline void BaseImage::set_bitsperpixel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_bitsperpixel(value);
  // @@protoc_insertion_point(field_set:pb.SensorNearData.BaseImage.bitsPerPixel)
}

// optional uint32 dataSize = 800 [default = 0];
inline bool BaseImage::_internal_has_datasize() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BaseImage::has_datasize() const {
  return _internal_has_datasize();
}
inline void BaseImage::clear_datasize() {
  datasize_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BaseImage::_internal_datasize() const {
  return datasize_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BaseImage::datasize() const {
  // @@protoc_insertion_point(field_get:pb.SensorNearData.BaseImage.dataSize)
  return _internal_datasize();
}
inline void BaseImage::_internal_set_datasize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  datasize_ = value;
}
inline void BaseImage::set_datasize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_datasize(value);
  // @@protoc_insertion_point(field_set:pb.SensorNearData.BaseImage.dataSize)
}

// optional bytes imageData = 900;
inline bool BaseImage::_internal_has_imagedata() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BaseImage::has_imagedata() const {
  return _internal_has_imagedata();
}
inline void BaseImage::clear_imagedata() {
  imagedata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BaseImage::imagedata() const {
  // @@protoc_insertion_point(field_get:pb.SensorNearData.BaseImage.imageData)
  return _internal_imagedata();
}
inline void BaseImage::set_imagedata(const std::string& value) {
  _internal_set_imagedata(value);
  // @@protoc_insertion_point(field_set:pb.SensorNearData.BaseImage.imageData)
}
inline std::string* BaseImage::mutable_imagedata() {
  // @@protoc_insertion_point(field_mutable:pb.SensorNearData.BaseImage.imageData)
  return _internal_mutable_imagedata();
}
inline const std::string& BaseImage::_internal_imagedata() const {
  return imagedata_.Get();
}
inline void BaseImage::_internal_set_imagedata(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  imagedata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BaseImage::set_imagedata(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  imagedata_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.SensorNearData.BaseImage.imageData)
}
inline void BaseImage::set_imagedata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  imagedata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pb.SensorNearData.BaseImage.imageData)
}
inline void BaseImage::set_imagedata(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  imagedata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.SensorNearData.BaseImage.imageData)
}
inline std::string* BaseImage::_internal_mutable_imagedata() {
  _has_bits_[0] |= 0x00000001u;
  return imagedata_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BaseImage::release_imagedata() {
  // @@protoc_insertion_point(field_release:pb.SensorNearData.BaseImage.imageData)
  if (!_internal_has_imagedata()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return imagedata_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BaseImage::set_allocated_imagedata(std::string* imagedata) {
  if (imagedata != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  imagedata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imagedata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.SensorNearData.BaseImage.imageData)
}
inline std::string* BaseImage::unsafe_arena_release_imagedata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pb.SensorNearData.BaseImage.imageData)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return imagedata_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BaseImage::unsafe_arena_set_allocated_imagedata(
    std::string* imagedata) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (imagedata != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  imagedata_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      imagedata, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.SensorNearData.BaseImage.imageData)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace SensorNearData
}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_SensorNearData_2fBaseImage_2eproto
